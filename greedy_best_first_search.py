# -*- coding: utf-8 -*-
"""Greedy_Best_first_Search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18EgramhJNlEkWhL61Ot-istYN2x6yXfQ
"""

from queue import PriorityQueue

# Fungsi untuk algoritma Greedy Search
def greedy_search(graph, start, goal):
    frontier = PriorityQueue()  # Antrian prioritas untuk menyimpan simpul yang akan dieksplorasi
    frontier.put((heuristics[start], start))  # Menambahkan simpul awal ke dalam antrian dengan nilai heuristik, using 'heuristics' instead of 'heuristic'
    explored = set()  # Set untuk menyimpan simpul yang sudah dieksplorasi
    path = {}

    while not frontier.empty():
        current_priority, current = frontier.get()  # Ambil simpul dengan prioritas terendah

        if current == goal:
            print("Greedy Best First")
            print("Simpul tujuan sudah ditemukan!")
            route = reconstruct_path(path, start, goal)
            print("Jalur terpendek:", route)
            return True

        explored.add(current)  # Menandai simpul saat ini sebagai sudah dieksplorasi

        for neighbor, cost in graph[current]: # unpack the tuple into neighbor and cost
            if neighbor not in explored and neighbor not in path:  # Pastikan neighbor belum dieksplorasi dan belum ada di path
                priority = heuristics[neighbor]  # Menggunakan nilai heuristik untuk menentukan prioritas, using 'heuristics' instead of 'heuristic'
                frontier.put((priority, neighbor))  # Menambahkan simpul tetangga ke dalam antrian dengan nilai prioritas heuristik
                path[neighbor] = current

    print("Simpul tujuan tidak ditemukan!")
    return False  # Mengembalikan False jika simpul tujuan tidak ditemukan

def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]
        route.append(current)
    route.reverse()
    return route

graph = {
    'S': [('A', 3), ('B', 2)],
    'A': [('S', 3), ('D', 5), ('B', 1)],
    'B': [('S', 2), ('A', 1), ('C', 2), ('D', 3)],
    'C': [('B', 2), ('D', 3), ('G', 4)],
    'D': [('A', 5), ('C', 3), ('G', 1), ('B', 3)],
    'G': [('D', 1), ('C', 4)]
}

heuristics = {
    'S': 6, 'A': 4, 'B': 3, 'C': 3, 'D': 1, 'G': 0
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi greedy search
greedy_search(graph, start_node, goal_node)
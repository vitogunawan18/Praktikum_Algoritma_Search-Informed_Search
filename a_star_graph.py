# -*- coding: utf-8 -*-
"""A_Star_graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zD0l0Y68G0kH6h3F3AeTeUn_cLBWo8NV
"""

from queue import PriorityQueue
# Fungsi untuk algoritma A* Graph Search
def a_star_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()  # Antrian prioritas
    frontier.put((0, start))  # Menambahkan simpul awal ke dalam antrian dengan nilai prioritas 0
    explored = set()  # Set untuk menyimpan simpul yang sudah dieksplorasi
    path = {}  # Dictionary untuk menyimpan asal simpul
    cost = {start: 0}  # Dictionary untuk menyimpan biaya dari start ke simpul tertentu

    while not frontier.empty():
        _, current_node = frontier.get()  # Mengambil simpul dengan nilai prioritas terendah

        if current_node == goal:
            print("A Graph Search")
            print("Simpul tujuan sudah ditemukan!")
            route = reconstruct_path(path, start, goal)
            print("Jalur Terpendek:", " -> ".join(route))
            print("Total Biaya:", cost[goal])
            return True

        explored.add(current_node)  # Menandai simpul saat ini sebagai sudah dieksplorasi

        for neighbor in graph[current_node]:
            new_cost = cost[current_node] + graph[current_node][neighbor]  # g(n) = biaya dari start ke neighbor
            if neighbor not in explored or new_cost < cost.get(neighbor, float('inf')):
                cost[neighbor] = new_cost
                priority = new_cost + heuristic[neighbor]  # f(n) = g(n) + h(n)
                frontier.put((priority, neighbor))  # Simpan simpul tetangga ke frontier
                path[neighbor] = current_node  # Simpan jalur dari mana datangnya simpul ini

    print("Simpul tujuan tidak ditemukan!")
    return False
def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]
        route.append(current)
    route.reverse()
    return route

# Daftar heuristik untuk setiap simpul
heuristic = {
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'S': 6,
    'G': 0
}

# Graf (dalam bentuk adjacency list)
graph = {
    'S': {'A': 3, 'B': 2},
    'A': {'B': 1, 'D': 5},
    'B': {'D': 3, 'C': 2},
    'C': {'D': 3, 'G': 4},
    'D': {'G': 1}
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi a_star_search
a_star_search(graph, start_node, goal_node, heuristic)
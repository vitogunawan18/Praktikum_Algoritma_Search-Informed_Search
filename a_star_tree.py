# -*- coding: utf-8 -*-
"""A_Star_Tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zD0l0Y68G0kH6h3F3AeTeUn_cLBWo8NV
"""

from queue import PriorityQueue

# Fungsi untuk algoritma A* Tree Search
def a_star_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()  # Antrian prioritas
    frontier.put((heuristic[start], start, [start]))  # Menyimpan jalur (route)
    explored = {}  # Menggunakan dictionary untuk menyimpan cost terkecil ke setiap simpul

    while not frontier.empty():
        cost, current_node, route = frontier.get()  # Mengambil simpul dengan prioritas terendah

        if current_node == goal:
            print(" A Tree Search Simpul tujuan sudah ditemukan!")
            print("Jalur Terpendek:", " -> ".join(route))
            print("Total Biaya:", cost)
            return True

        # Jika simpul belum dieksplorasi atau menemukan jalur dengan biaya lebih kecil
        if current_node not in explored or cost < explored[current_node]:
            explored[current_node] = cost  # Simpan biaya terbaik ke simpul

            if current_node in graph:
                for neighbor, step_cost in graph[current_node].items():
                    total_cost = cost + step_cost - heuristic[current_node] + heuristic[neighbor]
                    frontier.put((total_cost, neighbor, route + [neighbor]))  # Menyimpan jalur baru

    print("Simpul tujuan tidak ditemukan!")
    return False

# Daftar heuristik untuk setiap simpul
heuristic = {
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'S': 6,
    'G': 0
}

# Graf (dalam bentuk adjacency list)
graph = {
    'S': {'A': 3, 'B': 2},
    'A': {'B': 1, 'D': 5},
    'B': {'D': 3, 'C': 2},
    'C': {'D': 3, 'G': 4},
    'D': {'G': 1}
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi a_star_search
a_star_search(graph, start_node, goal_node, heuristic)